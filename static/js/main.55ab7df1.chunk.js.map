{"version":3,"sources":["components/list.js","App.js","serviceWorker.js","index.js"],"names":["List","state","list","company","axios","get","result","this","setState","data","ad","console","log","className","url","text","map","user","key","id","src","avatar","first_name","last_name","email","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0UAqDeA,E,4MAjDbC,MAAQ,CACNC,KAAM,GACNC,QAAS,I,wLAKM,qC,SACIC,IAAMC,IADV,sC,OACXC,E,OACJC,KAAKC,SAAS,CAAEN,KAAMI,EAAOG,KAAKA,KAAMN,QAASG,EAAOG,KAAKC,KAC7DC,QAAQC,IAAIL,KAAKN,MAAMC,M,qIAIvB,OACE,6BACE,yBAAKW,UAAU,aACb,4BAAKN,KAAKN,MAAME,QAAQA,SACxB,4BAAKI,KAAKN,MAAME,QAAQW,KACxB,2BAAIP,KAAKN,MAAME,QAAQY,OAGzB,wBAAIF,UAAU,cACXN,KAAKN,MAAMC,KAAKc,KAAI,SAACC,GAAD,OACnB,wBAAIJ,UAAU,YAAYK,IAAKD,EAAKE,IAClC,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACb,6BACE,yBAAKA,UAAU,WAAWO,IAAKH,EAAKI,WAGxC,yBAAKR,UAAU,SACb,wBAAIA,UAAU,cAAd,SACSI,EAAKK,WADd,IAC2BL,EAAKM,WAGhC,sCACS,2BAAOV,UAAU,aAAaI,EAAKO,oB,GAtC3CC,aCWJC,E,uKARX,OACE,yBAAKb,UAAU,kBACb,kBAAC,EAAD,W,GAJUY,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.55ab7df1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass List extends Component {\r\n  state = {\r\n    list: [],\r\n    company: \"\",\r\n  };\r\n\r\n  //fetching data from api\r\n  async componentDidMount() {\r\n    const apiURL = \"https://reqres.in/api/users?page=1\";\r\n    let result = await axios.get(apiURL);\r\n    this.setState({ list: result.data.data, company: result.data.ad });\r\n    console.log(this.state.list);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"main-text\">\r\n          <h3>{this.state.company.company}</h3>\r\n          <h4>{this.state.company.url}</h4>\r\n          <p>{this.state.company.text}</p>\r\n        </div>\r\n\r\n        <ul className=\"list-group\">\r\n          {this.state.list.map((user) => (\r\n            <li className=\"user-card\" key={user.id}>\r\n              <div className=\"content\">\r\n                <div className=\"left\">\r\n                  <div>\r\n                    <img className=\"user-img\" src={user.avatar} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"right\">\r\n                  <h6 className=\"card-title\">\r\n                    Name: {user.first_name} {user.last_name}\r\n                  </h6>\r\n\r\n                  <h6>\r\n                    Email: <small className=\"card-text\">{user.email}</small>\r\n                  </h6>\r\n                </div>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport List from \"./components/list\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"main-container\">\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}